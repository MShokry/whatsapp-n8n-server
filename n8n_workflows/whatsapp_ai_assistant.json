{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -1140,
        300
      ],
      "id": "34337521-f6f5-46ef-9b53-1d1b589a7344"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/v1/senders?unreadOnly=true",
        "options": {}
      },
      "name": "Get Unread Senders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -580,
        260
      ],
      "id": "455e18d4-a412-40a6-a36f-1b3d3e1b22bb"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "name": "Split Senders",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        740,
        220
      ],
      "id": "d66544a3-c970-4546-b311-7069b991f8ff"
    },
    {
      "parameters": {
        "url": "=http://localhost:3000/api/v1/messages?chatId={{$json[\"filteredSenders\"][0].id}}&limit=20",
        "options": {}
      },
      "name": "Get Chat History",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1020,
        140
      ],
      "id": "183cb5e3-8c7e-4e79-8661-c0b67d042395"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://localhost:3000/api/v1/reply",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"chatId\":\"{{ $('Split Senders').item.json.filteredSenders[0].id }}\",\n  \"messageId\":\"{{ $('Split Senders').item.json.filteredSenders[0].lastMessage.id || $('Get Chat History').item.json.messages[0].id }}\",\n  \"replyText\":{{JSON.stringify(($json.output || $json.text) + \"AIBOT\") }} \n} ",
        "headerParametersJson": "{\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}",
        "queryParametersJson": "{}"
      },
      "name": "Send Reply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1900,
        260
      ],
      "id": "2af036a3-c3f0-4da6-a8f5-e919f33d7b31"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-incoming",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1140,
        -140
      ],
      "webhookId": "whatsapp-incoming",
      "id": "68ea5e60-f8f2-4e63-9ae7-9421048fc111"
    },
    {
      "parameters": {
        "url": "=http://localhost:3000/api/v1/messages?chatId={{ $json.sender }}&limit=20",
        "options": {}
      },
      "name": "Get Webhook Chat History",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        660,
        660
      ],
      "id": "7548393b-a4f8-4d47-921a-b902d802f64e"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://localhost:3000/api/v1/webhook/setup",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "{\n\"webhookUrl\":\"http://localhost:5678/webhook/whatsapp-incoming\"\n}",
        "headerParametersJson": "{\n  \"Accept\": \"application/json\",\n  \"Content-Type\": \"application/json\"\n}",
        "queryParametersJson": "{}"
      },
      "name": "Test Setup Webhook1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -580,
        460
      ],
      "id": "1fa703b5-0022-4b23-888d-b51e052591f6"
    },
    {
      "parameters": {
        "jsCode": "\n// Extract the phone numbers from the Google Sheet\nconst rows = $input.all();\n// Assuming the sheet has a column named 'PhoneNumber' or similar\nconst allowedSenders = rows\n  .filter(row => row.json.Active === 'Yes' || row.json.Active === 'yes' || row.json.Active === \"true\")\n  .map(row => row.json.PhoneNumber);\n\nreturn { json: { allowedSenders } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -520,
        -20
      ],
      "id": "55498a45-2ddd-4581-884d-8ab8f9ad53fb",
      "name": "Code",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// Get the list of allowed senders from the database\nconst allowedSenders = $('Code').first().json.allowedSenders||$input.first().json.allowedSenders;\n// // Get the list of senders with unread messages\nlet senders = $input.last().json.senders ||  [$input.last().json.body]\n  \n// if ($('Get Unread Senders') !== undefined) {\n//   senders = $('Get Unread Senders')?.first().json.senders\n// } else if ($('Webhook') !== undefined) {\n//   senders = [$('Webhook')?.first().json.body.chat] ;\n// }else{\n//   senders = $input.last().json.senders ;\n// }\n\n// Filter senders to only include those in the allowed list\n// If allowedSenders is empty, include all senders\n\nconst filteredSenders = allowedSenders.length > 0 \n  ? senders.filter(sender => !!allowedSenders.includes( sender.id.split('@')[0]))\n  : senders;\n\nreturn  { filteredSenders };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        240
      ],
      "id": "20e7e6b4-cae5-4080-9997-604a0a90564e",
      "name": "Code1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Extract the chat messages\nconst messages = $input.first().json.messages;\nconst sender = messages[0].from;\nconst messageId = messages[0].id;\n\n// Format the messages for the AI\nlet conversationHistory = messages.map(msg => {\n  const role = msg.fromMe ? 'assistant' : 'user';\n  return {\n    role,\n    content: msg.body\n  };\n}).reverse(); // Reverse to get chronological order\n\n// Add system message at the beginning\nconversationHistory.unshift({\n  role: 'system',\n  content: 'You are a helpful WhatsApp assistant. Be concise, friendly, and helpful. If you don\\'t know something, say so politely.This is the chat between me and a client , Reply with a message to him, use the same language of the last message sent from the user'\n});\n\nreturn {\n  json: {\n    chatInput: conversationHistory,\n    sender,\n    messageId\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        980,
        660
      ],
      "id": "bb52af18-0fe9-44bc-98cc-37c67911b866",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Get the list of allowed senders from the database\nconst allowedSenders =  $('Code5').first().json.allowedSenders||$input.first().json.allowedSenders || [];\nconst webhookSender = $('Webhook').first().json.body.message.from.split('@')[0]\nconst isAllow = webhookSender?  allowedSenders.includes(webhookSender): false\n\nreturn { isAllow,sender:$('Webhook').first().json.body.contact.id, messageID:$('Webhook').first().json.body.message.id  } ;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        680
      ],
      "id": "1031178d-0d77-4bfb-b000-cb022d68926b",
      "name": "Code3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "790bc784-9a89-4457-af15-6ad91a12eac3",
              "leftValue": "={{ $json.isAllow }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        300,
        660
      ],
      "id": "f56bd872-5f3e-45f7-817e-fd3adfb17f88",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1140,
        140
      ],
      "id": "a6cb377f-b718-4487-81bc-63cf9a0b38dd",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract the chat messages\nconst messages = $json.messages\nconst sender = $json.chatId;\n// Format the messages for the AI\nlet conversationHistory = messages.map(msg => {\n  const role = msg.fromMe ? 'assistant' : 'user';\n  return {\n    role,\n    content:  msg.body.replace(\"\\'\",\"\\\\'\")\n  };\n}).reverse(); // Reverse to get chronological order\n\n// Add system message at the beginning\n// conversationHistory.unshift({\n//   role: 'system',\n//   content: 'You are a helpful WhatsApp assistant. Be concise, friendly, and helpful. If you don\\'t know something, say so politely.This is the chat between me and a client , Reply with a message to him, use the same language of the last message sent from the user'\n// });\n\nreturn {\n    json: {\n      userMessage: messages[0].body,\n      sessionId: { id: sender },\n      chatInput: conversationHistory,\n      sender\n    }\n  }\n;\n    // chatInput: JSON.stringify(conversationHistory),"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        140
      ],
      "id": "b60b9eaf-ac44-495c-a6ed-43f28b64126e",
      "name": "Code4"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1300,
        640
      ],
      "id": "7257f3a9-e534-4e73-b27d-34edd5104186",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1320,
        860
      ],
      "id": "7cecef39-e032-4272-82f1-8e6f09d10bb4",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "zv1FQ669nrhXbJGZ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://localhost:3000/api/v1/reply",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"chatId\":\"{{ $('If').item.json.sender }}\",\n  \"messageId\":\"{{ $('If').item.json.messageID }}\",\n  \"replyText\":\"{{ $json.output || $json.text }}\"\n} ",
        "headerParametersJson": "{\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}",
        "queryParametersJson": "{}"
      },
      "name": "Send Reply1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1780,
        640
      ],
      "id": "62df586b-a123-45d3-b8d3-5b8fe6ef71af"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -140,
        680
      ],
      "id": "c12e8493-28b9-46eb-a73d-e2c2d852b61c",
      "name": "Merge2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -220,
        220
      ],
      "id": "2fb89e54-f94e-4764-9a76-b3628048fa13",
      "name": "Merge"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a helpful WhatsApp assistant. Be concise, friendly, and helpful. If you don't know something, say so politely.This is the chat between me and a client , Reply with a message to him, use the same language of the last message sent from the user"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1520,
        -220
      ],
      "id": "025f82dd-0e3c-45a5-abda-fb6352b013dd",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "45ef233f-0584-4769-9f4c-5a285bccb84d",
              "leftValue": "={{ $json.filteredSenders }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        360,
        240
      ],
      "id": "aacd471d-bd81-476a-98dc-37757fcbb5d9",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1460,
        140
      ],
      "id": "c4aa66db-47e4-48ba-b594-568aff2a162c",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1M5SPii30dCnnUnLpGRZeJcnP8Mhh_OolJxQ0NFGixfo",
          "mode": "list",
          "cachedResultName": "whatsapp_integration",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M5SPii30dCnnUnLpGRZeJcnP8Mhh_OolJxQ0NFGixfo/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 120046669,
          "mode": "list",
          "cachedResultName": "google_sheets_template",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M5SPii30dCnnUnLpGRZeJcnP8Mhh_OolJxQ0NFGixfo/edit#gid=120046669"
        },
        "options": {}
      },
      "name": "Google Sheets1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        -720,
        660
      ],
      "id": "136e5f83-194e-4b97-9403-1cc84d3aa408",
      "alwaysOutputData": true,
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nybCA6Wi2Q9cutb6",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\n// Extract the phone numbers from the Google Sheet\nconst rows = $input.all();\n// Assuming the sheet has a column named 'PhoneNumber' or similar\nconst allowedSenders = rows\n  .filter(row => row.json.Active === 'Yes' || row.json.Active === 'yes' || row.json.Active === \"true\")\n  .map(row => row.json.PhoneNumber);\n\nreturn { json: { allowedSenders } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -420,
        580
      ],
      "id": "cc0444c4-7a2f-482d-aa0c-1914702e4336",
      "name": "Code5",
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -220,
        -200
      ],
      "id": "f7722c6d-5c42-40c5-98c0-5ca7190808e1",
      "name": "Merge3"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1M5SPii30dCnnUnLpGRZeJcnP8Mhh_OolJxQ0NFGixfo",
          "mode": "list",
          "cachedResultName": "whatsapp_integration",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M5SPii30dCnnUnLpGRZeJcnP8Mhh_OolJxQ0NFGixfo/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 120046669,
          "mode": "list",
          "cachedResultName": "google_sheets_template",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M5SPii30dCnnUnLpGRZeJcnP8Mhh_OolJxQ0NFGixfo/edit#gid=120046669"
        },
        "options": {}
      },
      "name": "Get row(s) in sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        -740,
        20
      ],
      "id": "42a6a121-3b48-4245-8c30-83c64fad5e37",
      "alwaysOutputData": true,
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "nybCA6Wi2Q9cutb6",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1060,
        -100
      ],
      "id": "7126834d-2a89-4331-a028-6fcfde5e1723",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "3IBh084dg5oGwzQK",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "database",
        "databaseId": {
          "__rl": true,
          "value": "14f72625-e9a4-8180-b67b-c8f035ecc69d",
          "mode": "list",
          "cachedResultName": "Notes",
          "cachedResultUrl": "https://www.notion.so/14f72625e9a48180b67bc8f035ecc69d"
        },
        "simple": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Simplify', ``, 'boolean') }}"
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1740,
        0
      ],
      "id": "59685fbf-88ba-4742-a617-63e72135dda5",
      "name": "Get a database in Notion",
      "credentials": {
        "notionApi": {
          "id": "EJQ307tj46sD2Vkl",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1620,
        0
      ],
      "id": "2bc7fb50-ee82-47d5-8bdc-9026c795d32e",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1520,
        0
      ],
      "id": "a1e5e713-b596-435c-9e00-79f107d0a41f",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "zv1FQ669nrhXbJGZ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Unread Senders",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Setup Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Unread Senders": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Senders": {
      "main": [
        [
          {
            "node": "Get Chat History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Chat History": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Reply": {
      "main": [
        [
          {
            "node": "Split Senders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Webhook Chat History": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get Webhook Chat History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Test Setup Webhook1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Unread Senders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Send Reply1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Split Senders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Send Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Get a database in Notion": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "e501e53e2db7db55d235cb2c13f5488f532820ae780081ff9d79539c74ed3ce3"
  }
}